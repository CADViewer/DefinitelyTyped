// Type definitions for cadviewer 7.0
// Project: https://github.com/cadviewer
// Definitions by: Casper Harnung <https://github.com/cadviewer>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 4.7

declare module 'cadviewer' {
    export function cvjs_CADViewerPro(cadviewerpro: boolean): void;
    export function cvjs_setHandlerSettings(handlerType: string, floorplan_div: string, controllerPath: string): void;
    export function cvjs_setAngular(mode: boolean): void;
    export function cvjs_setNodeJSserver(mode: boolean): void;
    export function cvjs_multipagePDFtoSVG_PhpLoad(mode: boolean): void;
    export function cvjs_printToPdf_windowRelativeSize(scale: number): void;
    export function cvjs_fileLoadFromSharePointServer(mode: boolean): void;
    export function cvjs_setInitMasterBackgroundMode(mode: boolean): void;
    export function cvjs_setJSFileOldType(oldtype: boolean): void;
    export function cvjs_EnablePrintIcon(floorplan_div: string): void;
    export function cvjs_DisablePrintIcon(floorplan_div: string): void;
    export function cvjs_encodeURIcallToserver(flag: boolean): void;
    export function cvjs_setCustomPDFprintControllerFlag(customPrintAsPDF: boolean): void;
    export function cvjs_setCustomPDFprintController(handlerName: string): void;
    export function cvjs_setServerHandlersPath(path: string): void;
    export function cvjs_setPrintObjectPath(path: string): void;
    export function cvjs_setPrintObjectPathAbsolute(pathUrl: string, absolutePathServer: string): void;
    export function cvjs_setServerPDFConverterController(handlerName: string): void;
    export function cvjs_setGetFileController(handlerName: string): void;
    export function cvjs_setReturnPDFparamsController(handlerName: string): void;
    export function cvjs_setPrintModal_PrintPDF(printPDFflag: boolean, printAsPDF: boolean): void;
    export function cvjs_setPrintModal_printGreyScaleflag(printGreyScaleflag: boolean): void;
    export function cvjs_setPrintModal_PrintToScale(printToScaleflag: boolean): void;
    export function cvjs_setServerSaveFileHandler(handlerName: string): void;
    export function cvjs_setServerCopyFileHandler(handlerName: string): void;
    export function cvjs_setServerListDirectoryHandler(handlerName: string): void;
    export function cvjs_setServerRedlinesListDirectoryHandler(handlerName: string): void;
    export function cvjs_setServerAppendFileHandler(handlerName: string): void;
    export function cvjs_setServerDeleteFileHandler(handlerName: string): void;
    export function cvjs_setServerSaveFileHandlerPrint(handlerName: string): void;
    export function cvjs_setServerAppendFileHandlerPrint(handlerName: string): void;
    export function cvjs_setServerDeleteFileHandlerPrint(handlerName: string): void;
    export function cvjs_setCustomMergedEmailHandler(handlerName: string): void;
    export function cvjs_setServerMergeDWGHandler(handlerName: string): void;
    export function cvjs_setServerGetQRCodeController(serverGetQRCodeController: string): void;
    export function cvjs_setServerSaveHandlerRedlines(handlerName: string): void;
    export function cvjs_setServerLoadHandlerRedlines(handlerName: string): void;
    export function cvjs_setServerLoadHandler(handlerName: string): void;
    export function cvjs_setPhpUploadPath(path: any): void;
    export function cvjs_setUploadControllerPath(path: any): void;
    export function cvjs_setUploadHandler(handlerName: string): void;
    export function cvjs_setUploadController(handlerName: string): void;
    export function cvjs_setPhpPath(path: string): void;
    export function cvjs_PageChangeList(floorplan_div: string): void;
    export function cvjs_LayerList(floorplan_div: string): void;
    export function cvjs_swapLayersInDrawing(floorplan_div: string): void;
    export function cvjs_allLayersInDrawingOn(floorplan_div: string): void;
    export function cvjs_layerNamefromObjectID(myObjectId: string): string;
    export function cvjs_interactiveLayerOff(floorplan_div: string): void;
    export function cvjs_getCurrentMultiPage_FileName(): string;
    export function cvjs_currentURL(): string;
    export function cvjs_currentHost(): string;
    export function cvjs_setDefaultJSPath(path: string): void;
    export function cvjs_setInformationModalType(mode: any): void;
    export function cvjs_displayInformationModal(floorplan_div: string, textString: any, modalHeight: number, modal_left: number, modal_top: number): void;
    export function cvjs_hideInformationModal(floorplan_div: string): void;
    export function cvjs_displayInformationModal_Mode(mode: any): void;
    export function cvjs_version(): string;
    export function cvjs_setBackgroundColor(floorplan_div: string): void;
    export function cvjs_setGenericColorFromPicker(pickcolor: any): void;
    export function cvjs_setBackgroundColorHex(hex: string, floorplan_div: string): void;
    export function cvjs_startSearchText(): void;
    export function cvjs_calibrateMeasurement(floorplan_div: string): void;
    export function cvjs_Measurement(floorplan_div: string): void;
    export function cvjs_getAutoCADColor(hexNumber: any): string;
    export function cvjs_get_dwg_scaled_value(n: number, page: number): number;
    export function cvjs_get_dwg_x_coord(x: number, page: number): number;
    export function cvjs_get_dwg_y_coord(y: number, page: number): number;
    export function cvjs_getGlobal_X_fromSVG(x: number): number;
    export function cvjs_getSVG_X_fromGlobal(x: number): number;
    export function cvjs_getGlobal_Y_fromSVG(y: number): number;
    export function cvjs_getSVG_Y_fromGlobal(y: number): number;
    export function cvjs_setServerCreateThumb_StickyNote_Controller(controller: string): void;
    export function cvjs_setServerSavePrintModeController(mode: number): void;
    export function cvjs_setServerSavePrintModeHandler(mode: number): void;
    export function cvjs_setServerScreenToPDFController(controller: string): void;
    export function cvjs_setServerScreenToPDFHandler(controller: string): void;
    export function cvjs_saveScreenAsImage_makeTumbnails(serverPath: string, image_fileName: string, sizeThumb1: number, thumb1_fileName: string, sizeThumb2: number, thumb2_fileName: string): void;
    export function cvjs_saveScreenAsImage_stickyNoteInfo_makeTumbnails(serverPath: string, image_fileName: string, sizeThumb1: number, thumb1_fileName: string, sizeThumb2: number, thumb2_fileName: string): void;
    export function cvjs_saveScreenAsImage(serverPath: string, image_fileName: string): void;
    export function cvjs_saveScreenAsPDF(pageOrientation: string, pageSize: string, pageResolution: string): void;
    export function cvjs_batchConvertDrawingsToPDF_CustomReport(floorPlan: any, drawingFilesArray: any, pageOrientationArray: any, pageSizeArray: any, pageResolutionArray: any, batchFilesToPDF_Controller: any, callbackMethod: any): void;
    export function cvjs_setPrintPaperSize(papersize: string): void;
    export function cvjs_setPrintResolutionDpi(dpi: number): void;
    export function cvjs_setPrintOrientation(orientation: string): void;
    export function cvjs_Print(floorplan_div: string): void;
    export function cvjs_Conversion_forPrint(floorplan_div: string, originatingContent: string, originatingUsername: string, originatingPassword: string, fileFormat: string): void;
    export function cvjs_printCanvasPaperSize(): void;
    export function cvjs_removePrintObjectAfterPrint(flag: boolean): void;
    export function cvjs_setJavaScriptsAbsoluteFolder(folder: string): void;
    export function cvjs_setJavaScriptsJQ_AbsoluteFolder(folder: string): void;
    export function cvjs_displayMagnifyingGlass(floorplan_div: any): void;
    export function cvjs_firstPage(floorplan_div: any): void;
    export function cvjs_lastPage(floorplan_div: any): void;
    export function cvjs_nextPage(floorplan_div: any): void;
    export function cvjs_changePageByNumber(floorplan_div: string, newpagenumber: number): boolean;
    export function cvjs_previousPage(floorplan_div: any): void;
    export function cvjs_setSupressHyperlinkColors(supressflag: boolean): void;
    export function cvjs_setUrl_singleDoubleClick(click: number): void;
    export function cvjs_encapsulateUrl_callback(flag: boolean): void;
    export function cvjs_AllLayersOff(): void;
    export function cvjs_LayerOn(layer: string): void;
    export function cvjs_LayerOn_OthersOff(layer: any): void;
    export function cvjs_LayerOn_AllOff(layer: string): void;
    export function cvjs_LayerOff(layer: string): void;
    export function cvjs_setPanState(panState: boolean): void;
    export function cvjs_windowResize_position(doResize: boolean, floorplan: string): void;
    export function cvjs_resizeWindow_position(floorplan: string): void;
    export function cvjs_resizeWindow_fixedSize(widthFloorplan: number, heightFloorplan: number, floorplan: string): void;
    export function cvjs_resizeWindow_fixedSize_location(widthFloorplan: number, heightFloorplan: number, floorplan: string, xPos: number, yPos: number): void;
    export function cvjs_windowResize_position_WidthHeight(doResize: any, widthFloorplan: any, heightFloorplan: any, floorplan: any): void;
    export function cvjs_windowResize_fixedSize(doResize: boolean, widthFloorplan: number, heightFloorplan: number, floorplan: string): void;
    export function cvjs_InitializeModals(floorplan_modal: any): void;
    export function cvjs_initialize_allColorCheckboxes(floorplan_div: any): void;
    export function cvjs_customPrintTextboxOnChange(): void;
    export function cvjs_LayerListModalXrefOnChange(mode: any): void;
    export function cvjs_line_thickness_modal_hide(floorplan_div: any): void;
    export function cvjs_exitLineThicknessModal(floorplan_div: any): void;
    export function cvjs_adjustMinimumLineThickness(percentage: any): void;
    export function cvjs_activateLineThicknessModal(floorplan_div: any): void;
    export function cvjs_interfaceCounterIndex(floorplan_div: any): number;
    export function cvjs_displayAllInterfaceControlsZoomDisk(floorplan_div: string): void;
    export function cvjs_hideAllInterfaceControls(floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_PageModal(mode: boolean, disableNavButtons: boolean, floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_DisableIcons(mode: boolean, floorplan_div: string): void;
    export function cvjs_displayAllInterfaceControls(mode: boolean, floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_ClassicSkin(mode: boolean, floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_ClassicSkin_DevicesSizeOnly(mode: boolean, floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_MimimumDisk(mode: boolean, floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_MimimumDisk_internal(mode: any, floorplan_div: any): void;
    export function cvjs_setIconInterfaceControls_PanZoomDisk(mode: boolean, floorplan_div: string): void;
    export function cvjs_overwriteDefaultDeviceSettings(mode: boolean): void;
    export function cvjs_initFloorPlanDivArray(floorplan_div: any): void;
    export function cvjs_InitCADViewer_highLight_popUp_dual_Id(floorplan_div: string, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object, cvjsPopUpBody: object, cvjsPopUpBody2: object): void;
    export function cvjs_InitCADViewer_highLight_popUp_app(floorplan_div: string, app_folder: any, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object, cvjsPopUpBody: object): void;
    export function cvjs_InitCADViewer_highLight_popUp(floorplan_div: string, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object, cvjsPopUpBody: object): void;
    export function cvjs_InitCADViewer_highLight(floorplan_div: string, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object): void;
    export function cvjs_InitCADViewer_app(floorplan_div: string, app_folder: string, imagePathDirect: string): void;
    export function cvjs_InitCADViewer_app_highLight(floorplan_div: string, app_folder: string, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object): void;
    export function cvjs_InitCADViewer_app_highLight_popUp(floorplan_div: string, app_folder: string, cvjsRoomPolygonBaseAttributes: object, cvjsRoomPolygonHighlightAttributes: object, cvjsRoomPolygonSelectAttributes: object, cvjsPopUpBody: object): void;
    export function cvjs_InitCADViewer(floorplan_div: string, image_location: any, javascripts_folder: string): void;
    export function cvjs_setRelativeScriptsPath(scriptsPath: string): void;
    export function cvjs_setCustomPdfFolder(customPdfFolderName: string, forcedUpdate: boolean): void;
    export function cvjs_getCurrentPage(): number;
    export function cvjs_LoadDrawingPDF_base(FileNamePath: any): void;
    export function cvjs_checkSVGOnServerBeforeLoadFirst(): void;
    export function cvjs_checkSVGOnServerBeforeLoad(newfile: any): void;
    export function cvjs_ClearDrawing(floorplan_div: string): void;
    export function cvjs_LoadDrawing(floorplan_div: string, FileName: string): void;
    export function cvjs_clearCurrentRedline(floorplan_div: string): void;
    export function cvjs_findMaxRedlineStickyNote(): number;
    export function cvjs_findMaxStickyNote(): number;
    export function cvjs_setUpVqRedlines_deleteNode_direct(delete_redline: any): void;
    export function cvjs_setUpStickyNotes_deleteNode_direct(delete_note: any): void;
    export function cvjs_setOriginatingFileUsernamePassword(username: any, password: any): void;
    export function cvjs_restApiController(): string;
    export function cvjs_restApiControllerLocation(): string;
    export function cvjs_setRestApiControllerLocation(myAXlocation: string): void;
    export function cvjs_setRestApiController(myConverterDoc: string): void;
    export function cvjs_restApiConverter(): string;
    export function cvjs_restApiConverterVersion(): string;
    export function cvjs_setConverter(converter: string, version: string): void;
    export function cvjs_setConverterCredentials(username: string, password: string): void;
    export function cvjs_Init_ConversionServer(rest_api_url: string, rest_api_php: string, username: string, password: string): void;
    export function cvjs_setSVG_outputFormatInAXConversions(mode: boolean): void;
    export function cvjs_conversion_clearAXconversionParameters(floorplan_div: string): void;
    export function cvjs_conversion_addAXconversionParameter(name: string, value: string, floorplan_div: string): void;
    export function cvjs_conversion_setContentType(contentType: string): void;
    export function cvjs_conversion_setContentFormat(contentFormat: string): void;
    export function cvjs_fileLoad_setContentFormat(contentFormat: any): void;
    export function cvjs_conversion_setUserLabel(userLabel: string): void;
    export function cvjs_conversion_setContentResponse(contentResponse: any): void;
    export function cvjs_conversion_getContentResponse(): string;
    export function cvjs_debugMode(debug: boolean): void;
    export function cvjs_setPasswordProtectionServerAccess(passwordprotection: boolean): void;
    export function cvjs_setServerAccessToServlet(flag: boolean): void;
    export function cvjs_setServerAccessToPost(flag: boolean): void;
    export function cvjs_LoadDrawing_Conversion(floorplan_div: string, originatingContent: string, originatingFileNameNoExtension: any, originatingUsername: string, originatingPassword: string): void;
    export function cvjs_LoadDrawing_Conversion_original(floorplan_div: any, originatingContent: any, originatingFileNameNoExtension: any, originatingUsername: any, originatingPassword: any): void;
    export function cvjs_setFileLoadTimeOut(floorplan_div: string, timeout: number): void;
    export function cvjs_fileLoadTimeOut(callback: any): void;
    export function cvjs_LoadDrawing_SVG(floorplan_div: string, FileNamePath: string, FileName: string): void;
    export function cvjs_addSVGClickHandler_onLoad(mode: boolean): void;
    export function cvjs_addMouseWheelControls(floorplan_div_nr: any): void;
    export function cvjs_zoomWindow(floorplan_div: string): void;
    export function cvjs_ZoomWindow(floorplan_div: string): void;
    export function cvjs_panRight(): void;
    export function cvjs_panUp(): void;
    export function cvjs_panDown(): void;
    export function cvjs_panLeft(): void;
    export function cvjs_zoomExtents(floorplan_div: string): void;
    export function cvjs_ZoomExtents(floorplan_div: string): void;
    export function cvjs_resetZoomPan(floorplan_div: string): boolean;
    export function cvjs_zoomIn(floorplan_div: string): void;
    export function cvjs_ZoomIn(floorplan_div: string): void;
    export function cvjs_zoomOut(floorplan_div: string): void;
    export function cvjs_ZoomOut(floorplan_div: string): void;
    export function cvjs_zoomInOutCustomFactor(floorplan_div: string, customZoomFactor: any): void;
    export function cvjs_zoomPositionFactor(x_pos: any, y_pos: any, wportx: any, wporty: any, floorplan_div: any, zoomfactor: any): void;
    export function cvjs_redrawViewBox(): void;
    export function cvjs_LoadTopIconMenuViewing(floorplan_div: string): void;
    export function cvjs_loadCADViewerLanguage(language: string, languagelocation: string): void;
    export function cvjs_setLanguage(Language: string): void;
    export function cvjs_getLanguages(): string;
    export function cvjs_getServerLocation(): string;
    export function cvjs_getServerURL(): string;
    export function cvjs_returnSpaceObjectSelected(): string;
    export function cvjs_setServerBackEndUrl(ServerLocationBackEndUrl: string): void;
    export function cvjs_getServerBackEndUrl(): string;
    export function cvjs_setServerLocationURL(ServerLocation: string, ServerUrl: string): void;
    export function cvjs_setTopMenuXML(floorplan_div: string, xml_config_file: string, xml_config_file_location: string): void;
    export function cvjs_setCustomTopMenuXML(xml_config_file: string, floorplan_div: string): void;
    export function cvjs_displayTopMenuIconBar(display_status: boolean, floorplan_div: string): void;
    export function cvjs_displayTopNavigationBar(display_status: boolean, floorplan_div: string): void;
    export function cvjs_changePreviousIconPage_TopIconMenu(floorplan_div: any): void;
    export function cvjs_changeNextIconPage_TopIconMenu(floorplan_div: any): void;
    export function cvjs_LoadTopNavigationMenu(floorplan_div: any): void;
    export function cvjs_LoadCoordinatesMenu(floorplan_div: any): void;
    export function cvjs_LoadSpaceObjectsCustomMenu(floorplan_div: any): void;
    export function cvjs_LoadTopIconMenu(floorplan_div: any): void;
    export function cvjs_LoadTopIconMenuXML(floorplan_div: any, cvjsIconMenu: any): void;
    export function cvjs_insertSingleIconImage(floorplan_div: string, placeholder: string, icon_image_code: string, cvjs_command_name: string, cvjs_command_parameter: string, cvjs_icon_image: string, cvjs_language_popup: boolean, cvjs_icon_image_npmpackage: string, firsticonflag: boolean): void;
    export function cvjs_navigationMenuItemHighlight(floorplan_div: any, placeholder: any, highlight_object_id: any, cvjs_language_popup: any, displayflag: any): void;
    export function cvjs_allowFileLoadToServer(mode: boolean): void;
    export function cvjs_setCustomCallbackMethodOnLoadEnd(callbackMethodOnLoadEnd: boolean, myOnLoadEndMethod: Function): void;
    export function cvjs_setLooperPosition(): void;
    export function cvjs_zoomZeroWidth(): void;
    export function cvjs_initZeroWidthHandling(floorplan_div: string, scale_factor: number): void;
    export function cvjs_rotateForward(floorplan_div: string): void;
    export function cvjs_rotateBackward(floorplan_div: string): void;
    export function cvjs_rotateAngle(angle: number, floorplan_div: string): void;
    export function cvjs_interactiveSearchText(floorplan_div: string): void;
    export function cvjs_interactiveSearchText_zoomLevel(zoomlevel: any): void;
    export function cvjs_exitSearchTextModal(): void;
    export function cvjs_searchText(textString: any, zoomFactor: number): void;
    export function cvjs_searchTextInstance(textString: any, zoomFactor: number, textInstance: number): boolean;
    export function cvjs_calibrateMeasurement_RedlinePolyline(): void;
    export function cvjs_Measurement_RedlinePolyline(): void;
    export function cvjs_closeAreaMeasurement(): void;
    export function cvjs_setPrintModalCustomCheckBox(mode: boolean, print_modal_custom_checkbox: string): void;
    export function cvjs_setPrintModalCustomCheckBoxFromFile(mode: boolean, print_modal_custom_checkbox: string): void;
    export function cvjs_setPrintModalCustomDualTextBox(mode: boolean, custom_checkbox_variables_list_filename: any): void;
    export function cvjs_setPrintModalCustomTextBox(mode: boolean, print_modal_custom_checkbox_variables_list: any): void;
    export function cvjs_setPrintModalCustomDualTextBoxFromFile(mode: boolean, custom_checkbox_variables_list_filename: any): void;
    export function cvjs_setPrintModalCustomTextBoxFromFile(mode: boolean, custom_checkbox_variables_list_filename: any): void;
    export function cvjs_GetURLParameter(sParam: string): string;
    export function cvjs_PrintToPDFWindowRelativeSize(factor: number): void;
    export function cvjs_setFileModalEditMode(mode: boolean): void;
    export function cvjs_setPrintPaperSizeasSVGObject(mode: boolean): void;
    export function cvjs_printPaperSizeasSVGObject(floorplan_div: any): void;
    export function cvjs_superimposeBackgroundDrawing_PrintOutputAtDualTextbox(floorplan_div: string, backgroundDrawing: string, adjustmentTop: number, adjustmentBottom: number, adjustmentLeft: number, adjustmentRight: number): void;
    export function cvjs_superimposeBackgroundDrawing_PrintOutputAtZoom(floorplan_div: string, backgroundDrawing: string, adjustmentTop: number, adjustmentBottom: number, adjustmentLeft: number, adjustmentRight: number): void;
    export function cvjs_Settings(floorplan_div: string): void;
    export function cvjs_exitSettingsModal(floorplan_div: any, flag: any): void;
    export function cvjs_setCurrentLanguage(floorplan_div: string, language: number): void;
    export function cvjs_copyMeasurementField(floorplan_div: string): void;
    export function cvjs_spaceObjectsInitSettingsModal(floorplan_div: any): void;
    export function cvjs_exitSpaceObjectsInitSettingsModal(): void;
    export function cvjs_continueCreateSpaceObjects(): void;
    export function cvjs_spaceObjectsChangeSettingsModal(floorplan_div: any): void;
    export function cvjs_exitSpaceObjectsChangeSettingsModal(): void;
    export function cvjs_updateChangeSpaceObjects(): void;
    export function cvjs_unlinkChangeSpaceObjects(): void;
    export function cvjs_setCustomToolTip(customtooltip: boolean): void;
    export function cvjs_showToolTipLocation(tiptext: string, x: number, y: number): void;
    export function cvjs_hideToolTip(): void;
    export function cvjs_displayCustomToolTip(id: string): any;
    export function cvjs_setCustomToolTipValue(id: string, contentArr: any): void;
    export function cvjs_searchReplaceText(textString: any, replaceString: string): void;
    export function cvjs_openHyperlinkInNewWindow(openLinkFlag: boolean, windowWidth: number, windowHeight: number): void;
    export function cvjs_getSpaceObjectIdList(): any[];
    export function cvjs_getSpaceObjectNamesList(): any[];
    export function cvjs_getSpaceObjectTypefromId(Id: string): string;
    export function cvjs_getSpaceObjectNodefromId(Id: string): object;
    export function cvjs_getSpaceObjectNamefromId(Id: string): object;
    export function cvjs_getSpaceObjectIdfromNode(nodeId: any): object;
    export function cvjs_getSpaceObjectNamefromNode(nodeId: any): object;
    export function cvjs_getAttributeStatus(nodeId: any): object;
    export function cvjs_setAttributeStatus(nodeId: any, attributeStatus: string): void;
    export function cvjs_getAttributeFromSpaceObjectNode(nodeId: any, attributeName: any): object;
    export function cvjs_setAttributeInSpaceObjectNode(nodeId: any, attributeName: any, attributeValue: any): void;
    export function cvjs_newLayer(layer: string): object;
    export function cvjs_newLayerDiv(layer: string, floorplan_div: string): object;
    export function cvjs_clearLayer(layer: string): string;
    export function cvjs_clearLayerDiv(layer: string, floorplan_div: string): void;
    export function cvjs_clearTextLayer(layer: string): void;
    export function cvjs_sortLayersInOrder(layer1: string, layer2: string): boolean;
    export function cvjs_sortLayers_prepend(layer1: string, layer2: string): boolean;
    export function cvjs_sortLayers_insertAfter(layer1: string, layer2: string): boolean;
    export function cvjs_AllGroupsOn(): void;
    export function cvjs_AllGroupsOff(): void;
    export function cvjs_GroupOn(group: any): void;
    export function cvjs_GroupOn_OthersOff(group: any): void;
    export function cvjs_GroupOn_AllOff(group: any): void;
    export function cvjs_GroupOff(group: any): void;
    export function cvjs_ApplyPatternOnSpaceObjectId(layer: string, Id: string, graphicalPattern: string, colorHex: string, fillOpacity: number): void;
    export function cvjs_ApplyPatternOnSpaceObjectNode(layer: string, nodeId: string, graphicalPattern: string, colorHex: string, fillOpacity: number): void;
    export function cvjs_ApplyPatternOnUrl(layer: string, nodeId: string, graphicalPattern: string, colorHex: string, fillOpacity: number): void;
    export function cvjs__ApplyPatternOnObject_layerSort(layer: any, nodeId: any, graphicalPattern: any, colorHex: any, fillOpacity: any, layer2: any, nodetype: any): 1 | -1;
    export function cvjs_setUpPattern_45degree_standard(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_45degree_wide(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_45degree_fine(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_90degree_fine(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_90degree_standard(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_90degree_wide(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_135degree_standard(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_135degree_wide(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_135degree_fine(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_0degree_standard(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_0degree_wide(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_0degree_fine(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_45degree_crosshatch_standard(colorHex: any, patternOpacity: any): void;
    export function cvjs_setUpPattern_45degree_crosshatch_fine(colorHex: any, patternOpacity: any): void;
    export function cvjs_ApplyRelativeLinearGradientStandard2Colors(graphicalObject: any, startColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeLinearGradientStandard3Colors(graphicalObject: any, startColor: any, middleColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeLinearGradient(graphicalObject: any, xStart: any, yStart: any, xEnd: any, yEnd: any, startColor: any, middleColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectId(layer: string, Id: string, startColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeLinearGradientStandard2ColorsOnSpaceObjectNode(layer: string, nodeId: string, startColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectId(layer: string, Id: string, startColor: string, middleColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeLinearGradientStandard3ColorsOnSpaceObjectNode(layer: string, nodeId: string, startColor: string, middleColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeLinearGradientOnObject_layerSort(layer: string, nodeId: string, xStart: number, yStart: number, xEnd: number, yEnd: number, startColor: string, middleColor: string, endColor: string, fillOpacity: number, layer2: string): 1 | -1;
    export function cvjs_ApplyRelativeRadialGradientStandard2Colors(graphicalObject: any, startColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeRadialGradientStandard3Colors(graphicalObject: any, startColor: any, middleColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeRadialGradient(graphicalObject: any, xC: any, yC: any, radius: any, startColor: any, middleColor: any, endColor: any, fillOpacity: any): void;
    export function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectId(layer: string, Id: string, startColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeRadialGradientStandard2ColorsOnSpaceObjectNode(layer: string, nodeId: string, startColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectId(layer: string, Id: string, startColor: string, middleColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeRadialGradientStandard3ColorsOnSpaceObjectNode(layer: string, nodeId: string, startColor: string, middleColor: string, endColor: string, fillOpacity: number): void;
    export function cvjs_ApplyRelativeRadialGradientOnObject_layerSort(layer: string, nodeId: string, xC: number, yC: number, radius: number, startColor: string, middleColor: string, endColor: string, fillOpacity: number, layer2: string): 1 | -1;
    export function cvjs_AddTextOnObject(txtLayer: string, nodeId: string, leftScale: number, textString1: string, textStyle1: object, scaleText1: string, hexColorText1: string, textString2: string, textStyle2: object, scaleText2: string, hexColorText2: string, textString3: string, textStyle3: object, scaleText3: string, hexColorText3: string): void;
    export function cvjs_AddTextAndTBorderOnSpaceObject3Lines(txtLayer: string, nodeId: string, tborderId: string, leftScale: number, textId1: string, textString1: string, textStyle1: object, scaleText1: string, hexColorText1: string, textId2: string, textString2: string, textStyle2: object, scaleText2: string, hexColorText2: string, textId3: string, textString3: string, textStyle3: object, scaleText3: string, hexColorText3: string): number;
    export function cvjs_AddTextAndTBorderOnSpaceObjectId_GlobalHeight(txtLayer: string, Id: string, leftScale: number, textStringArr: any[], textStyleArr: any[], scaleTextArr: any[], hexColorTextArr: any[], clipping: boolean): void;
    export function cvjs_AddTextAndTBorderOnSpaceObjectId(txtLayer: string, Id: string, leftScale: number, textStringArr: any[], textStyleArr: any[], scaleTextArr: any[], hexColorTextArr: any[], clipping: boolean, centering: boolean): void;
    export function cvjs_AddTextAndTBorderOnSpaceObjectNode(txtLayer: string, nodeId: string, leftScale: number, textStringArr: any[], textStyleArr: any[], scaleTextArr: any[], hexColorTextArr: any[], clipping: boolean, centering: boolean): void;
    export function cvjs_AddTextAndTBorderOnSpaceObject(txtLayer: any, nodeId: any, tborderId: any, leftScale: any, textIdArr: any, textStringArr: any, textStyleArr: any, scaleTextArr: any, hexColorTextArr: any, clipping: any, centering: any, globalheightFlag: any): number;
    export function cvjs_AddTextOnObjectScaleText(graphicalObject: any, leftScale: any, textString1: any, textStyle1: any, scaleText1: any, textString2: any, textStyle2: any, scaleText2: any, textString3: any, textStyle3: any, scaleText3: any): void;
    export function cvjs_setCallbackForModalDisplay(callbackForModalDisplay: any, customModalPopUpBody: Function, populateMyCustomPopUpBody: any): void;
    export function cvjs_setCreationMode(cvjs_supressPopUp: boolean, cvjs_creationMode: boolean, excludeID: string): void;
    export function cvjs_setNoModalMode(cvjs_modalMode: boolean): void;
    export function cvjs_setCustomModalsContent(hbody: string, dual_body_flag: any, hbody2: string): void;
    export function cvjs_setStickyNoteText(text: any): void;
    export function cvjs_setStickyNoteEditText(text: any): void;
    export function cvjs_showIconnoteTip(tipText: any, icon: any, n_index: any): void;
    export function cvjs_showStickynoteTip(tipText: any, icon: any, n_index: any, postfix: any, myStickNoteQtipDiv: any): void;
    export function cvjs_currentMaxSpaceNodeId(): string;
    export function cvjs_currentMaxNodeId(): string;
    export function cvjs_addUserIdToHiddenRedlineUsers(userId: string): void;
    export function cvjs_addUserIdToLockedRedlineUsers(userId: string): void;
    export function cvjs_clearAllRedlineHiddenUsers(): void;
    export function cvjs_clearAllRedlineLockedUsers(): void;
    export function cvjs_getRedlineHiddenUsersList(): string;
    export function cvjs_getRedlineLockedUsersList(): string;
    export function cvjs_getAllRedlines_UserIdList(): string;
    export function cvjs_getAllRedlines_TextList(): string;
    export function cvjs_hideAllRedlines_ExceptUser(userId: string): void;
    export function cvjs_lockAllRedlines_ExceptUser(userId: string): void;
    export function cvjs_hideAllRedlines_ExceptCurrentUser(): void;
    export function cvjs_lockAllRedlines_ExceptCurrentUser(): void;
    export function cvjs_hideAllRedlines_HiddenUsersList(): void;
    export function cvjs_lockAllRedlines_LockedUsersList(): void;
    export function cvjs_setCurrentNodeValues(currentNode_underbar: string, currentNode_name: string, currentNode_id: string, currentNode_layer: string, currentNode_group: string, currentNode_attributes: string, currentNode_attributeStatus: string, currentNode_type: string, currentNode_tags: string, currentNode_occupancy: string, currentNode_linked: boolean, currentNode_translate_x: string, currentNode_translate_y: string, currentNode_scale_x: string, currentNode_scale_y: string, currentNode_rotate: string, currentNode_transform: string, currentNode_area: string, currentNode_defaultcolor: object, currentNode_highlightcolor: object, currentNode_selectcolor: object, currentNode_pageNumber: object, currentNode_pageName: object): void;
    export function cvjs_setCurrentSpaceObjectNodeValues(currentNode_underbar: string, currentNode_name: string, currentNode_id: string, currentNode_layer: string, currentNode_group: string, currentNode_attributes: string, currentNode_attributeStatus: string, currentNode_type: string, currentNode_tags: string, currentNode_occupancy: string, currentNode_linked: boolean, currentNode_translate_x: string, currentNode_translate_y: string, currentNode_scale_x: string, currentNode_scale_y: string, currentNode_rotate: string, currentNode_transform: string, currentNode_area: string, currentNode_defaultcolor: object, currentNode_highlightcolor: object, currentNode_selectcolor: object, currentNode_pageNumber: object, currentNode_pageName: object): void;
    export function cvjs_setCurrentStickyNoteValues(currentStickyNote_underbar: string, currentStickyNote_name: string, currentStickyNote_id: string, currentStickyNote_layer: string, currentStickyNote_group: string, currentStickyNote_text: string, currentStickyNote_userid: string, currentStickyNote_date: string, currentStickyNote_linked: boolean): void;
    export function cvjs_setCurrentStickyNoteValues_All(currentStickyNote_underbar: string, currentStickyNote_name: string, currentStickyNote_id: string, currentStickyNote_layer: string, currentStickyNote_group: string, currentStickyNote_text: string, currentStickyNote_userid: string, currentStickyNote_date: string, currentStickyNote_linked: boolean, currentStickyNote_transform: boolean, currentStickyNote_currentPage: string, currentStickyNote_drawingRotation: number): void;
    export function cvjs_setCurrentStickyNoteValues_NameUserId(currentStickyNote_name: string, currentStickyNote_userid: string): void;
    export function cvjs_setCurrentStickyNoteValues_NameUserIdDate(currentStickyNote_name: string, currentStickyNote_userid: string, currentStickyNote_date: string): void;
    export function cvjs_setCurrentRedlineValues_NameUserid(currentRedline_username: string, currentRedline_userid: string): void;
    export function cvjs_setCurrentRedlineValues_Userid(currentRedline_userid: string): void;
    export function cvjs_setCurrentRedlineValues(currentRedline_underbar: string, currentRedline_name: string, currentRedline_id: string, currentRedline_layer: string, currentRedline_group: string, currentRedline_color: string, currentRedline_strokeWidth: any, currentRedline_drawingRotation: number): void;
    export function cvjs_setCurrentRedlineValues_All(currentRedline_underbar: string, currentRedline_name: string, currentRedline_id: string, currentRedline_layer: string, currentRedline_group: string, currentRedline_color: string, currentRedline_strokeWidth: any, currentRedline_fill: string, currentRedline_fill_opacity: number, currentRedline_transform: string, currentRedline_username: string, currentRedline_userid: string, currentRedline_currentPage: number, currentRedline_polypath_arrow: string, currentRedline_triangle_design: string, currentRedline_redline_text: string, currentRedline_drawingRotation: string, currentRedline_font_size: string): void;
    export function cvjs_setCurrentRedlineValues_ColorStokeWidth(currentRedline_color: string, currentRedline_strokeWidth: any): void;
    export function cvjs_setCurrentRedlineValues_Color(currentRedline_color: string): void;
    export function cvjs_setCurrentRedlineValues_StokeWidth(currentRedline_strokeWidth: any): void;
    export function cvjs_setCurrentRedlineValues_StrokeWidth(currentRedline_strokeWidth: any): void;
    export function cvjs_setCurrentNodeValuesFromExistingNode(currentNode_underbar: any): void;
    export function cvjs_overwriteNodeValues(overwriteNode_underbar: any, overwriteNode_id: any, overwriteNode_name: any, overwriteNode_layer: any, overwriteNode_group: any, overwriteNode_attributes: any, overwriteNode_attributeStatus: any, overwriteNode_type: any, overwriteNode_tags: any, overwriteNode_occupancy: any, overwriteNode_linked: any, overwriteNode_area: any): void;
    export function cvjs_addVqRoomsGraphics_newNode_polygon(cvjs_currentNode_underbar: any, graphicsObject: any): void;
    export function cvjs_addVqRoomsGraphics_newNode_circle(cvjs_currentNode_underbar: any, graphicsObject: any): void;
    export function cvjs_addVqStickyNotesGraphics_newNode(cvjs_currentNode_underbar: any, graphicsObject: any): void;
    export function cvjs_addVqRedlinesGraphics_newNode(cvjs_currentRedline_underbar: any, graphicsObject: any): void;
    export function cvjs_addVqRedlinesGraphics_newNodeFill(cvjs_currentRedline_underbar: any, graphicsObject: any, R_fill: any, R_opacity: any): void;
    export function cvjs_addVqRedlinesGraphics_newNodeTrans(cvjs_currentRedline_underbar: any, graphicsObject: any, transform: any, triangle_design: any, polypath_arrow: any): void;
    export function cvjs_addVqRedlinesGraphics_newNodeText(cvjs_currentRedline_underbar: any, graphicsObject: any, transform: any, textString: any, redline_font_size: any): void;
    export function cvjs_setUpVqRooms_currentNode(paper: any, cvjs_currentNode_underbar: any): void;
    export function cvjs_setUpVqStickyNotes_currentNode_vqIndex(paper: any, cvjs_currentNode_underbar: any, vqindex: any, passedoverInstance: any): void;
    export function cvjs_setUpVqStickyNotes_currentNode_vqIndex_passedInstance(paper: any, cvjs_currentNode_underbar: any, vqindex: any, passedoverInstance: any): void;
    export function cvjs_setUpVqStickyNotes_currentNode(paper: any, cvjs_currentNode_underbar: any): void;
    export function cvjs_setUpVqStickyNotes_currentNode_PageChange(paper: any, cvjs_currentNode_underbar: any, vqindex: any): void;
    export function cvjs_setUpVqRooms_deleteNode(node: any): void;
    export function cvjs_setUpStickyNotes_deleteNode(delete_note: any): void;
    export function cvjs_StickyNotes_arrayIndex(noteUnderbar: any): string | -1;
    export function cvjs_drawSpaceObject_Circle(): void;
    export function cvjs_drawSpaceObject_RedlineCloud(): void;
    export function cvjs_addRectangleCustomSpaceObject(floorplan_div: string, svgImagePath: string, spaceObjectId: string, spaceObjectName: string, spaceObjectType: string, spaceObjectLayer: any): void;
    export function cvjs_drawSpaceObject_CustomRectangle(svgImagePath: any, spaceObjectId: any, spaceObjectName: any, spaceObjectType: any): void;
    export function cvjs_drawSpaceObject_Rectangle(): void;
    export function cvjs_drawSpaceObject_RedlineRectangle(): void;
    export function cvjs_drawSpaceObject_RedlineEllipseCloud(): void;
    export function cvjs_drawSpaceObject_RedlineEllipse(): void;
    export function cvjs_drawSpaceObject_FilledRedlineRectangle(): void;
    export function cvjs_dynamicResizeTextOnSpaceObject(nodeUnderbar: string): void;
    export function cvjs_dynamicResizeTextOnSpaceObject_Name(name: string): void;
    export function cvjs_dynamicResizeTextOnSpaceObject_Id(id: string): void;
    export function cvjs_resetTextOnSpaceObject(nodeUnderbar: string): void;
    export function cvjs_resetTextOnSpaceObject_Name(name: any): void;
    export function cvjs_resetTextOnSpaceObject_Id(id: any): void;
    export function cvjs_drawSpaceObject_Polygon(): void;
    export function cvjs_drawSpaceObject_RedlinePolyline(): void;
    export function cvjs_drawSpaceObject_RedlineArrowPolyline(): void;
    export function cvjs_drawSpaceObject_RedlineFilledPolygon(): void;
    export function cvjs_setUpVqRedlines_currentNode(rPaper: any, cvjs_currentRedline_underbar: any): void;
    export function cvjs_setUpVqRedlines_deleteNode(delete_redline: any): void;
    export function cvjs_drawSpaceObject_CopyCircle(): void;
    export function cvjs_drawStickyNoteDirect(): void;
    export function cvjs_setCallbackMeasurement(callbackMode: boolean): void;
    export function cvjs_insertRedlineText(textString: any, fontSize: any): void;
    export function cvjs_changeNextIconPage(floorplan_div: any): void;
    export function cvjs_changePreviousIconPage(floorplan_div: any): void;
    export function cvjs_changeToIconPage(pageNr: any, floorplan_div: any): void;
    export function cvjs_setIconInterfaceControls_ViewingOnly(floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_SpaceManagement(floorplan_div: string): void;
    export function cvjs_setIconInterfaceControls_ImageInsert(): void;
    export function cvjs_initiateInsertRedlineText(floorplan_div: any): void;
    export function cvjs_insertImageLink(floorplan_div: string): void;
    export function cvjs_setCallbackQuickCount(callbackMode: boolean): void;
    export function cvjs_showMeCounts(floorplan_div: string): void;
    export function cvjs_clearQuickCounts(floorplan_div: string): void;
    export function cvjs_quickCount(floorplan_div: string): void;
    export function cvjs_exitQuickCount(floorplan_div: string): void;
    export function cvjs_setSpacePolygonOnLayer(floorplan_div: string): void;
    export function cvjs_findSVGcoordinate_setPolygonOnLayer(): void;
    export function cvjs_combineRoomTextlayer(): void;
    export function cvjs_getSizeOfLinkedObjects(): any;
    export function cvjs_createSpaceLocationArrays(nameArray: any, idArray: any): void;
    export function cvjs_createDataMapsHeaders(headerArray: any): void;
    export function cvjs_OnLoadEndCompareDrawings(): boolean;
    export function cvjs_setCompareDrawings_LoadSecondDrawingDirect(floorplan_div: string, fileName: string): void;
    export function cvjs_setCompareDrawings_StandardModal(floorplan_div: string): void;
    export function cvjs_compareDrawings_LoadSecondDrawing(floorplan_div: string): void;
    export function cvjs_compareDrawings_ToggleDrawingOverlay(floorplan_div: string): void;
    export function cvjs_compareDrawings_ToggleDrawings(floorplan_div: string): void;
    export function cvjs_exitCompareDrawings(floorplan_div: string): void;
    export function cvjs_setCollaborationSessionName(session_name: any): void;
    export function cvjs_setCollaborationServerUrl(url_name: string): void;
    export function cvjs_setCollaborationServerFolder(server_path: string): void;
    export function cvjs_collab_timer(): void;
    export function cvjs_start_collab(floorplan_div: string): void;
    export function cvjs_start_collab_button(floorplan_div: any): void;
    export function cvjs_stop_collab(floorplan_div: string): void;
    export function cvjs_clear_collab_redline(floorplan_div: string): void;
    export function cvjs_make_collab_presenter(floorplan_div: string): void;
    export function cvjs_downloadFile(filePath: any): void;
    export function cvjs_SVGtoOriginal_X_coord(x: any, page: any): number;
    export function cvjs_SVGtoOriginal_Y_coord(y: any, page: any): number;
    export function cvjs_InitializeSVGHyperlinkClick(floorplan_div: string): void;
    export function cvjs_colorSingleSVGHyperlink(hyperlinkId: string, hyperFill: string, hyperOpacity: number): void;
    export function cvjs_resetSVGHyperlinkColors(): void;
    export function cvjs_makeLegendUpperRightDiv(upperRightDeltaX: number, upperRightDeltaY: any, roomLayer: any, headerScale: any, headerString: any, headerStyle: any, headerHexColor: any, scaleTextArr: number[], textStringArr: any, textStylesArr: any, hexColorTextArr: any, legendColorArr: any, floorplan_div: string, highlight_handles_style_object: any): void;
    export function cvjs_makeLegendUpperRight(upperRightDeltaX: number, upperRightDeltaY: any, roomLayer: any, headerScale: any, headerString: any, headerStyle: any, headerHexColor: any, scaleTextArr: number[], textStringArr: any, textStylesArr: any, hexColorTextArr: any, legendColorArr: any, highlight_handles_style_object: any): void;
    export function cvjs_changeText_On_BlockHandle(handle: string, textArr: any): void;
    export function cvjs_changeText_On_BlockHandleDiv(handle: string, textArr: any, floorplan_div: string): boolean;
    export function cvjs_makeStampUpperRightDiv(upperRightDeltaX: number, upperRightDeltaY: any, roomLayer: string, headerScale: number, headerStringArr: any, headerStyle: object, headerHexColor: string, scaleTextArr: number[], textStringArr: any, textStylesArr: any, hexColorTextArr: any, hexColorFrame: string, floorplan_div: string): void;
    export function cvjs_makeStampUpperRight(upperRightDeltaX: number, upperRightDeltaY: any, roomLayer: any, headerScale: any, headerStringArr: any, headerStyle: any, headerHexColor: any, scaleTextArr: number[], textStringArr: any, textStylesArr: any, hexColorTextArr: any, hexColorFrame: any): void;
    export function cvjs_saveStamp(fileName: string, floorplan_div: string, layer: object): void;
    export function cvjs_saveCustomSVGLayer(fileName: string, floorplan_div: string, layer: object, custom_content: object): void;
    export function cvjs_saveFloorplanAsPDF(fileName: string, floorplan_div: string, custom_content: object): void;
    export function cvjs_saveFloorplanAsPDFtoSharePoint(fileName: string, floorplan_div: string, sharepointFolder: string, sharepointUserName: string, custom_content: object): void;
    export function cvjs_saveFloorplanAsSVG(fileName: string, floorplan_div: string, custom_content: object): void;
    export function cvjs_mergePDFwithRedlines(filePath: string, urlPath: string, fileName: string, floorplan_div: string): void;
    export function cvjs_loadStamp(fileName: string, floorplan_div: string, layer: object): void;
    export function cvjs_loadCustomSVGLayer(fileName: string, floorplan_div: string, layer: object): void;
    export function cvjs_LoadDrawingAborted(floorplan_div: any, fileName: any): void;
    export function cvjs_hideNavigationMenu(mydiv: string): void;
    export function cvjs_checkRoomHandleDiv(rmid: string, floorplan_div: string): boolean;
    export function cvjs_checkBlockHandleDiv(handle: string, floorplan_div: string): boolean;
    export function cvjs_getStickyNoteInfo(): string;
    export function cvjs_saveStickyNoteInfo(fileName: string, floorplan_div: string, custom_content: object): void;
    export function cvjs_publishPDF(floorplan_div: string): void;
    export function cvjs_mergeDXFDWG(floorplan_div: string): void;
    export function cvjs_mergeDXFViaButton(floorplan_div: any): void;
    export function cvjs_saveScreenAsMergedDXF(floorplan_div: any, mode: any, custom_content: any): void;
    export function cvjs_publishPDFViaButton(floorplan_div: any): void;
    export function cvjs_saveScreenAsPDF_uploadServer(pageOrientation: string, pageSize: string, pageResolution: string, floorplan_div: string): void;
    export function cvjs_saveScreenAsPDF_email(pageOrientation: string, pageSize: string, pageResolution: string, floorplan_div: string): void;
    export function cvjs_printSavedBitmapToPDF_uploadServer(): void;
    export function cvjs_printSavedBitmapToPDF_email(): void;
    export function cvjs_printScreenAsPDFwithRedlines(floorplan_div: string, custom_content: object): void;
    export function cvjs_initializeFileSelector(): void;
    export function cvjs_setModalSingleFileItems(number: any): void;
    export function cvjs_initializeAllFileSelectorDivs(floorplan_div: any): void;
    export function cvjs_add_file_object(myElement: any): void;
    export function cvjs_setServerFileLocation(myServerPathToFloorplans: string, floorplanPath: string, floorplanUrl: string, username: string, password: string): void;
    export function cvjs_setServerFileLocation_AbsolutePaths(myServerPathToFloorplans: string, floorplanUrl: any, username: string, password: string): void;
    export function cvjs_exitServerFileLoadModal(): void;
    export function cvjs_callServerForDataOverlayProcessing(): void;
    export function cvjs_loadFileWithDataOverlays(fileName: any, row: any): void;
    export function cvjs_loadBitmapsViaServerPath(mode: boolean): void;
    export function cvjs_openFileLoadToServer(floorplan_div: string): void;
    export function cvjs_setFileLoadTrialMode(loadMode: any): void;
    export function cvjs_loadServerFileList(mode: any): void;
    export function cvjs_setRedlinesRelativePath(path: string, serverPath: string): void;
    export function cvjs_setRedlinesAbsolutePath(path: string, serverPath: string): void;
    export function cvjs_openSpaceObjectSaveModal(floorplan_div: any): void;
    export function cvjs_openRedlineSaveModal(floorplan_div: any): void;
    export function cvjs_openRedlineLoadModal(floorplan_div: any): void;
    export function cvjs_toggleBlackWhite(floorplan_div: any): void;
    export function cvjs_colorAllLayersInDrawing_OriginalColor_SVG(floorplan_div: any): void;
    export function cvjs_colorAllLayersInDrawing_InvertBackground_SVG(hexColor: any, bwMode: any, floorplan_div: any): void;
    export function cvjs_storeFillColors(): void;
    export function cvjs_colorAllLayersInDrawing(floorplan_div: any, hexColor: string): void;
    export function cvjs_colorAllLayersInDrawing_InvertBackground(hexColor: any, floorplan_div: any): void;
    export function cvjs_setInsertImageObjectsRelativePath(path: string, serverPath: string): void;
    export function cvjs_setInsertImageObjectsAbsolutePath(path: string, serverPath: string): void;
    export function cvjs_setInsertImageObjectsAbsolutePath_FileName(path: string, serverPath: string, fileName: string): void;
    export function cvjs_add_image(): void;
    export function cvjs_loadAllImageLinks(floorplan_div: string, custom_content: object): void;
    export function cvjs_loadImageObjectTimer(): void;
    export function cvjs_addInlineScript(cvjs_script: any): void;
    export function cvjs_saveAllImageLinks(floorplan_div: string, custom_content: object): void;
    export function cvjs_clearAllImageLinks(floorplan_div: string): void;
    export function cvjs_loadDrawingsWithSpaceObjects(floorplan_div: string): void;
    export function cvjs_conversion_cleanFilesDirectory(): void;
    export function cvjs_setSpaceObjectUserMode(mode: any): void;
    export function cvjs_addRectangleSpaceObject(floorplan_div: string): void;
    export function cvjs_addRectangleSpaceObjectCore(floorplan_div: any): void;
    export function cvjs_addPolygonSpaceObject(floorplan_div: string): void;
    export function cvjs_addPolygonSpaceObjectCore(floorplan_div: any): void;
    export function cvjs_addCircleSpaceObject(floorplan_div: string): void;
    export function cvjs_addCircleSpaceObjectCore(floorplan_div: any): void;
    export function cvjs_copyCircleSpaceObject(floorplan_div: string): void;
    export function cvjs_clearSpaceObjects(floorplan_div: string): void;
    export function cvjs_deleteSpaceObject(floorplan_div: string): void;
    export function cvjs_changeSpaceObjectDisplayMode(floorplan_div: string, displayModal: boolean): void;
    export function cvjs_change_space(rmid: any): void;
    export function cvjs_displaySpaceObjectsStructure(floorplan_div: string): void;
    export function cvjs_displaySpaceObjectsStructureInternal(floorplan_div: any, userSiteName: any, dropFloor: any, dropFloorList: any, myCustomFunction: any): void;
    export function cvjs_spaceObjectSettings(floorplan_div: string): void;
    export function cvjs_spaceObjectInputPanel(floorplan_div: any, custom_content: any): void;
    export function cvjs_addCircleAccessPointObject(): void;
    export function cvjs_setLanguageIndexIncrement(): void;
    export function cvjs_setLanguageIndex(languageIndex: any): void;
    export function cvjs_ajaxPostCallbackVariable_thumbNails(callbackStatus: boolean): void;
    export function cvjs_emailSettings_PDF_publish(from_name: string, from_mail: string, cc_mail: string, replyto: string): void;
    export function cvjs_emailScreenAsPDFwithRedlines(floorplan_div: string, custom_content: object): void;
    export function cvjs_dragBackgroundToFront_SVG(floorplan_div: string): void;
    export function cvjs_dragBackgroundToBack_SVG(floorplan_div: string): void;
    export function cvjs_saveAsSVG(floorplan_div: string): void;
    export function cvjs_download_link(filename: any, filelocation: any): void;
    export function cvjs_saveAsSVGOnServer(floorplan_div: string, FileLocation: string, custom_content: object): void;
    export function cvjs_getStickyNotesRedlineXML(stickynote_flag: boolean): string;
    export function cvjs_getCurrentMeasurementUnit(): string;
    export function cvjs_getSvgToWorldUnits(): number;
    export function cvjs_setCurrentMeasurementUnits(floorplan_div: string, units: string, svgToWorldUnit: number): void;
    export function cvjs_resetInitialization_FloorplanDiv(): void;
    export function cvjs_setDragBackgroundOnTop(floorplan_div: string): void;
    export function cvjs_setDragBackgroundToBack(floorplan_div: string): void;
    export function cvjs_creation_modal_show(floorplan_div: any): void;
    export function cvjs_creation_modal_hide(floorplan_div: any): void;
    export function cvjs_showCreationModeModal(floorplan_div: any): void;
    export function cvjs_drawEllipseViaButton(floorplan_div: any): void;
    export function cvjs_ellipse_modal_hide(floorplan_div: any): void;
    export function cvjs_drawRedlineEllipseCloud(floorplan_div: any): void;
    export function cvjs_buildFolderTree(FileLocation: string, DocumentLocation: string, floorplan_div: string): string;
    export function cvjs_CleanLayout(floorplan_div: any): void;
    export function cvjs_selectPageFromList(floorplan_div: any): void;
    export function cvjs_custom_jsTreeSelection(data: any, datalength: any): void;
    export function cvjs_conversion_setApplicationServiceParameters(applicationPlatform: string, applicationPlatformUsername: string, applicationPlatformUserID: string, ServiceToken: string, leaveStreamOnServer: any): void;
    export function cvjs_update_done_edit_location_fields(rmid: any): void;
    export function cvjs_draw_space_object_names_on_spaces(): void;
    export function cvjs_connectTextInstances(textString1: any, textInstance1: number, textString2: any, textInstance2: any, lengthfactor1: number, lengthfactor2: number): void;
    export function cvjs_floodfill(cvjs_ctx: any, canv_width: any, canv_height: any, widthHeightFactorSVG: any, widthHeightFactorSVGless1: any): void;
    export function cvjs_floodfillWrapper(x: any, y: any, text: any, canv_width: any, canv_height: any, cvjs_ctx: any, sizeWidth: any, sizeHeight: any): void;
    export function cvjs_pngForSVG(htmlPrintFile: any): void;
    export function cvjs_addPinMarker(floorplan_div: string, spaceObjectId: string, spaceObjectName: string, spaceObjectType: string, spaceObjectLayer: any): void;
    export function cvjs_drawSpaceObject_PinMarker(spaceObjectId: any, spaceObjectName: any, spaceObjectType: any): void;
    export function cvjs_PinMarker(): void;
    export function cvjs_mergeQR(floorplan_div: any, custom_content: object): void;
    export function cvjs_CompareFiles_setFileModalContent(custom_modal_dir_listing: object, floorPlan_div: string): void;
    export function cvjs_createSpaceOutput_JSfile_Legacy(): string;
    export function cvjs_createSpaceOutput_JSfile(): string;
    export function cvjs_loadSpaceObjectsUser(floorplan_div: any): void;
    export function cvjs_setSpaceObjectsAbsolutePath(path: string, serverPath: string): void;
    export function cvjs_setSpaceObjectUrl(file: string): void;
    export function cvjs_loadSpaceObjects(floorplan_div: string, custom_content: object): void;
    export function cvjs_supressPopUpModalMode(modal_mode: boolean): void;
    export function cvjs_supressSingleSpaceHighlight(modal_mode: boolean): void;
    export function cvjs_addSpaceObjectDirectXY(floorplan_div: string, svgImagePath: string, spaceObjectId: string, spaceObjectName: string, spaceObjectType: string, coordinate_flag: number, xcor: number, ycor: number, textArray: any, scaleFactor: number, colorObject: any, textStyles: any, scaleText: any[], hexColorText: any[], leftFactor: number): void;
    export function cvjs_addFixedSizeCustomSpaceObjectXY(floorplan_div: string, svgImagePath: string, spaceObjectId: string, spaceObjectName: string, spaceObjectType: string, spaceObjectLayer: any, xcor: number, ycor: number, coordinate_flag: number, textArray: any, scaleFactor: number, textStyles: any, scaleText: any[], hexColorText: any[], leftFactor: number): void;
    export function cvjs_moveFixedSizeCustomSpaceObjectXY(floorplan_div: string, spaceObjectId: string, xcor: number, ycor: number): void;
    export function cvjs_addFixedSizeCustomSpaceObject(floorplan_div: string, svgImagePath: string, spaceObjectId: string, spaceObjectName: string, spaceObjectType: string, spaceObjectLayer: any): void;
    export function cvjs_drawSpaceObject_FixedSize(svgImagePath: any, spaceObjectId: any, spaceObjectName: any, spaceObjectType: any): void;
    export function cvjs_deleteSpaceImageObject(floorplan_div: string): void;
    export function cvjs_rotateSpaceObject(floorplan_div: string): void;
    export function cvjs_moveSpaceObject(floorplan_div: string): void;
    export function cvjs_resizeSpaceObject(floorplan_div: string): void;
    export function cvjs_resizeSpaceImageObject(floorplan_div: string): void;
    export function cvjs_resizeSpaceImageObject_core(floorplan_div: any): void;
    export function cvjs_addFixedSizeImageSpaceObjectXY(floorplan_div: string, xcor: number, ycor: number): void;
    export function cvjs_addFixedSizeImageSpaceObject_GlobalXY(floorplan_div: string, xcor: number, ycor: number): void;
    export function cvjs_addFixedSizeImageSpaceObject(floorplan_div: string): void;
    export function cvjs_addDragRectangleImageSpaceObject(floorplan_div: string): void;
    export function cvjs_initCADViewerPro_Section02(floorplan_div: string): void;
    export function cvjs_initCADViewerPro_Section03(floorplan_div: string): void;
    export function cvjs_initCADViewerPro_FileLoadModal(floorplan_div: string): void;
    export function cvjs_getStickyNotesRedlineDXF(): string;
    export function cvjs_getStickyNotesRedlineJS(): string;
    export function cvjs_getStickyNotesRedline(): string;
    export function cvjs_saveSpaceObjects(floorplan_div: string, filepath: string, custom_content: object): void;
    export function cvjs_saveStickyNotesRedlines(floorplan_div: string, display_modal: boolean, custom_content: object): void;
    export function cvjs_drawRedline__Freehand(): void;
    export function cvjs_setRedlineColor(floorplan_div: string): void;
    export function cvjs_color_modal_hide(floorplan_div: any): void;
    export function cvjs_setPublishPDF(floorplan_div: string): void;
    export function cvjs_publishPDF_modal_hide(floorplan_div: any): void;
    export function cvjs_setMergeDXF(floorplan_div: string): void;
    export function cvjs_mergeDXF_modal_hide(floorplan_div: any): void;
    export function cvjs_setGenericColor(): void;
    export function cvjs_setRedlineThickness(floorplan_div: string): void;
    export function cvjs_setRedlineColorViaButton(floorplan_div: any): void;
    export function cvjs_setRedlineColorFromPicker(pickcolor: any): void;
    export function cvjs_setRedlineThicknessViaButton(floorplan_div: any): void;
    export function cvjs_drawRedlineRectangle(floorplan_div: string): void;
    export function cvjs_drawRedlineTriangle(floorplan_div: string): void;
    export function cvjs_drawRedlineFilledRectangle(floorplan_div: string): void;
    export function cvjs_drawRedlineCloud(floorplan_div: string): void;
    export function cvjs_drawRedlineEllipse(floorplan_div: string): void;
    export function cvjs_drawRedlinePolyline(floorplan_div: string): void;
    export function cvjs_drawRedlineFilledPolygon(floorplan_div: string): void;
    export function cvjs_drawRedlineArrow(floorplan_div: string): void;
    export function cvjs_drawRedlineText(floorplan_div: string): void;
    export function cvjs_hide_redline_text_modal(floorplan_div: any): void;
    export function cvjs_exitRedlineTextModal(): void;
    export function cvjs_setStickyNoteRedlineUrl(file: string): void;
    export function cvjs_setStickyNoteSaveRedlineUrl(file: string): void;
    export function cvjs_drawRedline_Freehand(floorplan_div: string): void;
    export function cvjs_drawRedline_Freehand_globalColorWidth(): void;
    export function cvjs_drawRedline_Freehand_setValues(): void;
    export function cvjs_drawStickyNote_setValues(): void;
    export function cvjs_drawStickyNote(floorplan_div: string): void;
    export function cvjs_deleteLastRedline(floorplan_div: string): void;
    export function cvjs_undoDeleteLastRedline(floorplan_div: string): void;
    export function cvjs_deleteAllRedlines(): void;
    export function cvjs_deleteAllStickyNotes(): void;
    export function cvjs_loadStickyNotesRedlines(floorplan_div: string, custom_content: object): void;
    export function cvjs_loadStickyNotesRedlinesTimer(): void;
    export function cvjs_deleteSingleRedline(floorplan_div: string): void;
    export function cvjs_saveScreenAsImage_UploadSharepointListItem(serverPath: any, image_fileName: any, user_name: any, list_name: any, record_id: any): void;
    export function cvjs_batchConvertDrawingsToPDF(drawingFilesArray: any, pageOrientationArray: any, pageSizeArray: any, pageResolutionArray: any): void;
    export function cvjs_batchConvertOnLoadEndCustomMethod(): void;
    export function cvjs_clearDrawingSpaceObjects(): void;
    export function cvjs_clearDrawing(): void;
    export function cvjs_clearDrawingStickyNotes(): void;
    export function cvjs_clearDrawingHyperlinks(): void;
    export function cvjs_clearDrawingRedlines(): void;
    export function cvjs_updateDrawingRedlines(redlineStickyNoteLayer: any): void;
    export function cvjs_clearAllDrawing(): void;
    export function cvjs_highlightURL(urlid: any, roomstyle: object, layer: string): void;
    export function cvjs_highlightURL_layersort(rmid: any, roomstyle: any, layer: any, layer2: any): 1 | -1;
    export function cvjs_highlightRoomCSS(rmid: any, roomstyle: any): void;
    export function cvjs_highlightAllSpaceObjects(roomstyle: object, layer: string): void;
    export function cvjs_highlightAllRooms_layer(roomstyle: any, layer: any): void;
    export function cvjs_highlightSpaceObjectIdDiv(rmid: string, roomstyle: object, layer: string, floorplan_div: string): void;
    export function cvjs_highlightSpaceObjectId(rmid: string, roomstyle: object, layer: string): void;
    export function cvjs_highlightRoomCSS_layer(rmid: string, roomstyle: object, layer: string): void;
    export function cvjs_highlightRoomCSS_layersortDiv(rmid: string, roomstyle: object, layer: string, floorplan_div: string): boolean;
    export function cvjs_highlightRoomCSS_layersort(rmid: string, roomstyle: object, layer: string, layer2: string): 1 | -1;
    export function cvjs_highlightSpaceBorderCSS_layersortDiv(rmid: string, roomstyle: object, layer: string, floorplan_div: string, lineWeightFactor: number): boolean;
    export function cvjs_highlightSpaceBorderCSS_layersort(rmid: any, roomstyle: object, layer: string, layer2: string, lineWeightFactor: number): 1 | -1;
    export function cvjs_highlightFixtureCSS_layersort(rmid: any, roomstyle: any, layer: any, layer2: any, scale: any): 1 | -1;
    export function cvjs_highlightRoomRGB(rmid: any, r: any, g: any, b: any): void;
    export function cvjs_highlightRoomHex(rmid: any, hex: any): void;
    export function cvjs_highlightRoomByIdHex(rmid: any, hex: any): void;
    export function cvjs_highlightRoomImmediate(rmid: string, cleardrawing: boolean): string | number;
    export function cvjs_highlightRoomImmediateHyperlinks(rmid: any): string | number;
    export function cvjs_highlightRoomImmediateStickyNotes(rmid: any): string | number;
    export function cvjs_highlightRoomImmediateNoClearDrawing(rmid: any): string | number;
    export function cvjs_activateSpaceObjectModal_Id(rmid: string): void;
    export function cvjs_activateSpaceObjectModal_Node(node: string): void;
    export function cvjs_mysimple_encode(outputstring: any): string;
    export function cvjs_setLicenseKeyPath(licensePath: string): void;
    export function cvjs_setLicenseKeyDirect(licensekey: string): void;
    export function cvjs_checkLicensePreThenLoad(floorplan_div: any, originatingContent: any, originatingFileNameNoExtension: any, originatingUsername: any, originatingPassword: any): void;
    export function cvjs_checkLicense(): void;
    export function cvjs_LayerListSpaceObject(floorplan_div: string, mode: number): void;
    export function cvjs_LayerListSpaceClick(id: any): void;
    export function cvjs_LayerTypeSpaceClick(id: any, mode: any): void;
    export function cvjs_generateShareFileDrawingList(): void;
    export function cvjs_buildShareFileDrawingSelector(): void;
    export function cvjs_setQRCodeInsertion(PercentXFromLowerLeft: number, PercentYFromLowerLeft: number, widthPercent: any): void;
    export function cvjs_setLoadMultipleRedlinesStickyNotes(mode: boolean): void;
    export function cvjs_idObjectClicked(): string;
    export function cvjs_IdObjectClicked(): string;
    export function cvjs_NameObjectClicked(): string;
    export function cvjs_NodeObjectClicked(): string;
    export function cvjs_StickyNoteClicked(): string;
    export function cvjs_resizeWindow_3D(model3D: string, floorplan: string): void;
    export function cvjs_hidePop(): any;
    export function cvjs_redrawPop(): void;
    export function cvjs_pick_space(trigger: any): void;
    export function cvjs_zoomHere(): void;
    export function cvjs_zoomHere_ObjectId(rmid: string, factor: number): void;
    export function cvjs_zoomHere_ObjectIdDiv(rmid: string, factor: number, floorplan_div: string): void;
    export function cvjs_zoomHere_Factor(node: string, factor: number): void;
    export function cvjs_zoomHere_Handle(handle: string, factor: number, floorplan_div: string): boolean;
    export function cvjs_directDownloadStickyNotesRedlines(floorplan_div: string, filename: string): void;
    export function cvjs_clickElem(elem: any): void;
    export function cvjs_directUploadStickyNotesRedlines(floorplan_div: string): void;
    export function cvjs_change_datamaps(mapNr: any): void;
    export function cvjs_hide_image_note(imageNote: any): void;
    export function cvjs_delete_image(imageNote: any, floorplan_div: any): void;
    export function cvjs_setGlobalSpaceImageObjectScaleFactor(factor: number): void;
    export function cvjs_setDgnWorkSpace(workspace: string, workspacepath: string): void;
    export function cvjs_setDgnWorkSpaceServerPath(workspacepath: string): void;
    export function cvjs_addSingleSpaceObject(floorplan_div: string, currentNode_name: string, currentNode_id: string, currentNode_layer: string, currentNode_group: string, currentNode_attributes: string, currentNode_attributeStatus: string, currentNode_type: string, currentNode_tags: string, currentNode_occupancy: string, currentNode_Path: string): void;
    export function cvjs_ObjectBoundingBox_ScreenCoord(rmid: number): any;
    export function cvjs_highlightSpaceObjectDirect(floorplan_div: string, objectID: string, colorobject: any): void;
    export function cvjs_clearHighlightSpaceObjectDirect(floorplan_div: string, objectID: string): void;
    export function cvjs_clearAllHighlightSpaceObjectDirect(floorplan_div: string): void;
    export function cvjs_modifySpaceObjectDirectXY(floorplan_div: string, spaceObjectId: string, svgImagePath: string, textArray: any, scaleFactor: number, textStyles: any, scaleText: any[], hexColorText: any[], leftFactor: number): boolean;
    export function cvjs_coreModifySpaceObjectDirectXY(xcor: any, ycor: any, this_Node_underbar: any, spaceObjectId: any): void;
    export function cvjs_moveSpaceObjectDirectXY(floorplan_div: string, objectID: string, coordinate_flag: number, xpos: any, ypos: any): boolean;
    export function cvjs_getSpaceObjectDirectXYCoord(floorplan_div: string, objectID: string, coordinate_flag: number): any[];
    export function cvjs_deleteSpaceObjectDirectXY(floorplan_div: string, objectID: string): boolean;
    export function cvjs_allSpaceObjectsOn(floorplan_div: string): void;
    export function cvjs_allSpaceObjectsOff(floorplan_div: string): void;
    export function cvjs_setSpaceObjectsDefaultLayer(floorplan_div: string, layerName: string): void;
    export function cvjs_getSpaceObjectDefaultLayer(floorplan_div: string): string;
    export function cvjs_getLayerForSpaceObject(floorplan_div: string, ObjectID: string): string;
    export function cvjs_getLayerOnSpaceObject(floorplan_div: any, ObjectID: any): void;
    export function cvjs_setSpaceObjectOnLayer(floorplan_div: string, objectID: string, layerName: string): boolean;
    export function cvjs_setSpaceObjectOnOff(floorplan_div: string, objectID: string, displayStatus: string): boolean;
    export function cvjs_returnAllSpaceObjectsOnLayer(floorplan_div: string, layerName: string): any[];
    export function cvjs_spaceObjectLayerOnOff(floorplan_div: string, layerName: string, displayStatus: string): void;
    export function cvjs_returnActiveSpaceObjects(floorplan_div: string): any[];
    export function cvjs_returnSpaceObjectClicked(): any;
    export function cvjs_returnAllSpaceObjects(): any;
    export function cvjs_returnSpaceObjectID(spaceID: string): any;
    export function cvjs_setSpaceObjectDirect(jsonSpaceObject: any): boolean;
    export function cvjs_changeSpaceObjectLayer(currentId: string, newLayer: string): boolean;
    export function cvjs_changeSpaceObjectLinkStatus(currentId: string, linkFlag: boolean): boolean;
    export function cvjs_changeSpaceObjectName(currentId: string, newName: string): boolean;
    export function cvjs_changeSpaceObjectType(currentId: string, newType: string): boolean;
    export function cvjs_changeSpaceObjectID(currentId: string, newId: string): boolean;
    export function cvjs_clearAllHighlightHandleObjectStyles(): void;
    export function cvjs_removeSingleHighlightHandleObjectStyles(id: any, handle: any): void;
    export function cvjs_HighlightHandleObjectStyles(hexColor: string, lineWeightFactor: number, opacity: number, tooltip: boolean, id: string, customTooltip: string): void;
    export function cvjs_mouseenter_handleObjectStyles(hexColor: string, lineWeightFactor: number, opacity: number, tooltip: boolean, id: string, handle: string, customTooltip: string): void;
    export function cvjs_convertOrgToHex(styleString: any): any;
    export function cvjs_rgbToHex(rgb: any): string;
    export function cvjs_mouseout_handleObjectStyles(id: string, handle: string): void;
    export function cvjs_highlightSpace(rmid: string, roomstyle: object): 1 | -1;
    export function cvjs_clearSpaceLayer(): void;
    export function cvjs_hatchSpace(rmid: string, graphicalPattern: string, colorHex: string, fillOpacity: number): number;
    export function cvjs_clearAllCustomTooltips(): void;
    export function cvjs_removeSelectedAndReturnOriginalStyle(rmid: string, _mySpaceArray: any): any;
    export function cvjs_returnOriginalStyleAndRemoveSelected(rmid: string, mySpaceArray: any): any;
    export function cvjs_returnIsSpaceMultipleSelected(rmid: string, spaceArray: any[]): boolean;
    export function cvjs_addSelectedToOriginalStyles(rmid: string): void;
    export function cvjs_returnSelectedOriginalStyles(rmid: string): any;
    export function cvjs_currentSpaceSettings(): Object;
    export function cvjs_initMultiSelect(): void;
    export function cvjs_exitMultiSelect(): void;
    export function cvjs_getLengthOfSVGPath(path: any): number;
    export function cvjs_emptyMainCanvasInAngular(floorPlan: any): void;
    export function cvjs_emptyMainCanvas(floorplan_div: string): void;
    export function cvjs_setMultiSelect(multiSelect: boolean): void;
    export function cvjs_getMultiSelect(): boolean;
    export function cvjs_hideOnlyPop(): void;
    export function cvjs_executeCustomCanvasMethod_drag(generic_start_method: any, generic_stop_method: any, generic_move_method: any, generic_init_method: any): void;
    export function cvjs_executeCustomCanvasMethod_nodrag(generic_mousemove_method: any, generic_mousedown_method: any, generic_mouseup_method: any, generic_dblclick_method: any, generic_init_method: any): void;
    export function cvjs_executeCustomCanvasMethod_click(generic_mousemove_method: any, generic_mousedown_method: any, generic_mouseup_method: any, generic_dblclick_method: any, generic_init_method: any): void;
    export function cvjs_customCanvasMethod_globalScale(): void;
    export function cvjs_SVG_x(x: number): number;
    export function cvjs_SVG_y(y: number): number;
    export function cvjs_rect_doOverlap(l1_x: number, l1_y: number, r1_x: number, r1_y: number, l2_x: number, l2_y: number, r2_x: number, r2_y: number): boolean;
    export function cvjs_getSpaceObjectBoundingBox(id: string): any;
    export function cvjs_addVqRoomsGraphics_newNode(currentNode_underbar: string, graphicsObject: any): void;
    export function cvjs_createSpaceObjectGroup(currentNode_underbar: string, baseGraphics: any, customSpaceObjectId: string, customSpaceObjectName: string, customSpaceObjectType: string, customLayer: string, customGroup: string): void;
    export function cvjs_addGraphicsToSpaceObjectGroup(currentNode_underbar: string, baseGraphics: any, objectTag: string): void;
    export function cvjs_addObjectToSpaceObjectGroup(currentNode_underbar: string, graphicsTag: string, objectTag: string, isGroup: boolean): void;
    export function cvjs_makeGraphicsObjectOnCanvas(objectType: string, graphicsObject: string): any;
    export function cvjs_removeCustomCanvasMethod(): void;
    export function cvjs_setLastObj(space: any): void;
    export function cvjs_sendCustomCanvasToFront(floorplan_div: string): void;
    export function cvjs_sendCustomCanvasToBack(floorplan_div: string): void;
    export function cvjs_makeTextObjectOnCanvas(x: number, y: number, textObject: string): any;
    export function cvjs_setImageSpaceObjectParameters(loadSpaceImage_LocationOrbase64Object: string, loadSpaceImage_ID: string, loadSpaceImage_Type: string, loadSpaceImage_Layer: string): void;
    export function cvjs_getSpaceObjectNodeList(): any[];
    export function cvjs_hideObjectInSpaceObjectGroup(id_node: string, objectTag: string, type: string): void;
    export function cvjs_showObjectInSpaceObjectGroup(id_node: string, objectTag: string, type: string): void;
    export function cvjs_showOnlyObjectInSpaceObjectGroup(id_node: string, objectTag: string, type: string): void;
    export function cvjs_showOnlyObjectInAllSpaceObjectGroups(objectTag: string): void;
    export function cvjs_setDisableClickDrag(flag: boolean): void;
    export function cvjs_setInteractiveZoomWidthAdjustment(flag: boolean): void;
    export function cvjs_adjustMinimumLineThickness_Value(minlinewidth: any): void;
    export function cvjs_setCallbackMethod(callbackMethodName: string, callbackMethod: Function): void;
    export function cvjs_AddTextOnSpaceObject(txtLayer: string, Id: string, leftScale: number, textStringArr: any[], textStyleArr: any[], scaleTextArr: any[], hexColorTextArr: any[], clipping: boolean, centering: boolean): void;
    export function cvjs_setHandlers_FrontEnd(handlerType: string, frontEndType: string, floorplan_div: string, controllerPath: string): void;
    export function cvjs_setHandleObjectProcessing(hlallProcessing: boolean): void;
    export function cvjs_HighlightHandle(hexColor: string, lineWeightFactor: number, opacity: number, handle: string): void;
    export function cvjs_setLayerColor(layerName: string, layerHexColor: string): void;
    export function cvjs_LoadDrawing_SVG_string(floorplan_div: string, basestring: string, FileName: string, base64: boolean): void;
    export function cvjs_searchTextNext(searchString: string, zoomFactor: number): void;
    export function cvjs_setLeafletJS(mode: boolean): void;
    export function cvjs_handleObjectsParceBlocks(flag: boolean): void;
    export function cvjs_LoadTopIconMenuXML_preconfigured(floorplan_div: string): void;
    export function cvjs_overwritePDFOutputParameter(flag: boolean, param: string, value: string): void;
    export function cvjs_regenerateTopIconMenuXML(floorplan_div: string): void;
    export function cvjs_DisplayCoordinatesMenu(floorplan_div: string, displayFlag: boolean): void;
    export function cvjs_setAllServerURLsLocation(ServerBackEndUrl: string, ServerUrl: string, ServerLocation: string): void;
    export function cvjs_setReturnPathController(returnPathController: string): void;
    export function cvjs_setAllServerPaths_and_Handlers(ServerBackEndUrl: string, ServerUrl: string, ServerLocation: string, handlerType: string, frontEndType: string, floorplan_div: string, controllerPath: string): void;
    export function cvjs_removeHandleFunc_Generic(): void;
    export function cvjs_drawRedlineSingleLine(floorplan_div: string): void;
    export function setllccktrace(flag: any): void;
    export function cvjs_spaceObjectClickHandlerControlID(onoff: boolean, spaceID: string): void;
    export function cvjs_spaceObjectClickHandlerControlAll(onoff: boolean): void;
    export function cvjs_addSpaceObject(floorplan_div: any, ID: any, loadSpaceImage_LocationOr64byteEncoded: any, scale: any, width: any, height: any, rotate: any, unit: any, jsonSpaceObject: any): void;
    export function cvjs_addLayeredSpaceObject(floorplan_div: any, ID: any, LocationOr64byteEncodedArr: any, layerArr: any, scale: any, width: any, height: any, rotate: any, unit: any, jsonSpaceObject: any): void;
    export function cvjs_createNewJSonSpaceObject(): any;
    export function cvjsspace_createNewJSonSpaceObject(): any;
    export function cvjsspace_changeSpaceObjectDisplayMode(floorplan_div: string, displayModal: boolean): void;
    export function cvjsspace_addHandleFunc_ResizeDragSpace(node: any, rmid: any, spc: any): void;
    export function cvjsspace_resizeSpaceImageObject(floorplan_div: string): void;
    export function cvjsspace_resizeSpaceObject(floorplan_div: string): void;
    export function cvjsspace_moveSpaceObject(floorplan_div: string): void;
    export function cvjsspace_rotateSpaceObject(floorplan_div: string): void;
    export function cvjsspace_displaySpaceObjectsStructure(floorplan_div: string): void;
    export function cvjsspace_deleteSpaceObject(floorplan_div: string): void;
    export function cvjsspace_clearSpaceObjects(floorplan_div: string): void;
    export function cvjsspace_addPolygonSpaceObject(floorplan_div: string): void;
    export function cvjsspace_addRectangleSpaceObject(floorplan_div: string): void;
    export function cvjsspace_addCircleSpaceObject(floorplan_div: string): void;
    export function cvjsspace_copyCircleSpaceObject(floorplan_div: string): void;
    export function cvjs_replaceSpaceObjectPathWithImage(floorplan_div: string, spaceID: string, imagelocation: string): boolean;
    export function cvjs_loadSpaceObjectsDirect(floorplan_div: string, spaceObjectUrl: string): void;
    export function cvjs_setSpaceObjectsStructureDirect(floorplan_div: string, spaceObjectStructure: string): void;
    export function cvjs_setCustomConversionEndpointExtension(flag: boolean): void;
    export function cvjs_extractSVGfromCanvas(floorplan_div: string): string;
    export function cvjs_downloadObjectAsFile(filename: string, object: string, binaryflag: boolean): void;
    export function cvjs_setSpaceObjectProcessing(spaceProcessing: boolean): void;
    export function cvjs_returnNonPreprocessedSVG(): string;
    export function cvjs_restAPI_getSVGContentData(remainOnServer: boolean): string;
    export function cvjs_setMouseTouchHandlers_SpaceObject(floorplan_div: any, active_floorplan_div_nr: any, room: any): void;
    export function cvjs_setSpaceObjectsCustomMenu(serverFolder: any, fileName: any, flag: any): void;
    export function cvjs_setIconImageSize(floorplan_div: string, pixelheight: boolean, pixelheight_large: boolean): void;
    export function cvjs_changeSpaceObjectNode(currentNode: string, newNode: string): boolean;
    export function cvjs_hideSpaceObjectID(spaceID: string): boolean;
    export function cvjs_showSpaceObjectID(spaceID: string): boolean;
    export function cvjs_setCADViewerInterfaceVersion(version: boolean): void;
    export function cvjs_getSpaceObjectByType(getType: string): any;
    export function cvjs_returnAllRedlineObjects(): any;
    export function cvjs_returnAllStickyNoteObjects(): any;
    export function cvjs_setAllRedlineStickyNoteObjects(jsonObject: any): void;
    export function cvjs_setAllRedlineObjects(redlineObjects: any, clear: any): void;
    export function cvjs_setAllStickyNoteObjects(stickyNoteObjects: any, clear: any): void;
    export function cvjs_returnAllRedlineStickyNoteObjects(): any;
    export function cvjs_setQtipZindex(zindex: number): void;
    export function cvjs_setQtipLocation(qtip_location_my: number, qtip_location_at: number): void;
    export function cvjs_changeSpaceFixedLocation(rmid: string): void;
    export function cvjs_handleObjectsParceTextOnly(flag: boolean): void;
    export function cvjs_processHandleObjects(): void;
    export function cvjs_getTextOnId(id: string): string; 
}

